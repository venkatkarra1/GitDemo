import java.util.ArrayList;
import java.util.stream.Stream;

import org.testng.annotations.Test;

public class test1 {

	public static void main(String[] args) {
		//count the number of names starting with alphabet A in List
		test1 t1 = new test1();
		t1.regular();
		t1.StreamFilter();
		
	}
		public static void regular()
		{
			ArrayList<String> names = new ArrayList<String>();//this is how we need to create Array list object, this list will only have stirngs
			names.add("abhijeet");
			names.add("aon");
			names.add("alekya");
			names.add("Adam");
			names.add("Ram");
			int count = 0;//if we want to get the count of the names starting with Alphabet A then we need to iterate through ArrayList using forloop
			for(int i=0;i<names.size();i++)//names.size of an arrayi.e 5 names, it will iterate 5 times, each time if we want to grab unique
			{
	
				String actual = names.get(i);//lets store it in a variable called as actual
				if(actual.startsWith("A"))//now you should compare if that string starts with Letter A then 
				{
					count++;
				}
			}
			System.out.println(count);
		}
		public void StreamFilter()
		{
			ArrayList<String> names = new ArrayList<String>();//this is how we need to create Array list object, this list will only have stirngs
			names.add("abhijeet");
			names.add("Aon");
			names.add("Alekya");
			names.add("Adam");
			names.add("Ram");
			//there is no life for intermediate operation if there is no terminal operation
			//terminal operation will execute only if intermediate operation(filter) returns true
			//we can create stream
			//how to use filter in stream API
			Long c = names.stream().filter(s->s.startsWith("A")).count();//lambda expression part 2 this is also called as terminal operation
			System.out.println(c);
			Long d = Stream.of("Abhijeet","Don","Alekhya","Adam","Ram").filter(s->
			{
				s.startsWith("A");	
				return false;
			}).count();
			System.out.println(d);
		}
}
	